<users>
{
doc('DataFileName")/users/*
}
</users>

<users>
{
for $e in doc('AuditTrail.xml')/audit_trail/event
where $e/type = "submitForBatch" and not ($e[processed])
return doc($e/metadata/file_name/text())/users/*
}
</users>

let $e:=<event><time>ttt</time><type>initiateXBatchJob</type><queue_id>qqq</queue_id></event>
return insert node $e as first into /audit_trail
							
for $x in doc("books.xml")/bookstore/book
return	if ($x/@category="CHILDREN")
then <child>{data($x/title)}</child>
else <adult>{data($x/title)}</adult>

for $prod at $p in (1 to 10)
return $p

let $cd := current-date()
let $fd := $cd - xs:dayTimeDuration("P28D")
return
<users>
	{
	for $m in doc('/Members.xml')/members/member
	return
		<user>
		{
		for $u in doc('/xPressionHelper/FromHIP')/users/user
		where $u/external_id = $m/badge_number
		return
			<d>
			{
			for $prod at $p in (1 to 10)
			let $d := $fd + xs:dayTimeDuration(concat("P", $p, "D"))
			return
				<dd>{$d}</dd>
			}
			</d>
		}
		</user>
	}
</users>

************************************************************************************************************************
let $current_day := xs:date("2015-02-10")
let $first_day := $current_day - xs:dayTimeDuration("P28D")
return
<users>
{
for $m in doc('/Members.xml')/members/member
return
		<user>
			<badge_number>{$m/badge_number/text()}</badge_number>
			<index_history>
				<items>
	{
	for $day_offset in (1 to 28)
	let $current_date := $first_day + xs:dayTimeDuration(concat("P", $day_offset, "D"))
	return
					<item>
						<day>{$day_offset}</day>
						<date>{$current_date}</date>
						<value>
		{						
		let $current_date_extract := xs:date(doc('/xPressionHelper/FromHIP/')/users/user[./external_id = $m/badge_number and xs:date(./index_history/last_value_date/text()) = xs:date($current_date)]/index_history/last_value_date/text())
		let $current_date_day := xs:date($current_date)
		let $current_value := doc('/xPressionHelper/FromHIP/')/users/user[./external_id = $m/badge_number and xs:date(./index_history/last_value_date/text()) = xs:date($current_date)]/index_history/values/value[7]/text()
		return 
		if ($current_date_day=$current_date_extract)
		then $current_value
		else 0
		}
						</value>
					</item>
	}
				</items>
			</index_history>
		</user>
}
</users>

*************************************************************************************************************************
let $current_day := xs:date("2015-02-10")
let $first_day := $current_day - xs:dayTimeDuration("P28D")
let $source := doc('/xPressionHelper/FromHIP/')
return
<users>
{
for $m in doc('/Members.xml')/members/member
let $u := $source/users/user[./external_id = $m/badge_number][1]
return
		<user>
			<badge_number>{$m/badge_number/text()}</badge_number>
			<username>{$u/username/text()}</username>
			<email>{$u/email/text()}</email>
			<gender>{$u/gender/text()}</gender>
			<index_history>
				<update_date>{$current_day}</update_date>
				<first_date>{$first_day}</first_date>
				<items>
	{
	for $day_offset in (1 to 28)
	let $current_date := $first_day + xs:dayTimeDuration(concat("P", $day_offset, "D"))
	return
					<item>
						<day_offset>{$day_offset}</day_offset>
						<date>{$current_date}</date>
						<value>
		{						
		let $current_date_extract := xs:date($source/users/user[
				./external_id = $m/badge_number
				and
				xs:date(./index_history/last_value_date/text()) = xs:date($current_date)
			]/index_history/last_value_date/text())
		let $current_date_day := xs:date($current_date)
		let $current_value := $source/users/user[
				./external_id = $m/badge_number
				and
				xs:date(./index_history/last_value_date/text()) = xs:date($current_date)
			]/index_history/values/value[7]/text()
		return 
			if ($current_date_day=$current_date_extract)
			then $current_value
			else 0
		}
						</value>
					</item>
	}
				</items>
			</index_history>
		</user>
}
</users>

*************************************************************************************************************************
let $current_day := xs:date("2015-02-15")
let $first_day := $current_day - xs:dayTimeDuration("P28D")
let $source := doc('/xPressionHelper/FromDailyUpdates/')
let $award_threshold := 300
return
<MonthlyReports>
{
for $m in doc('/Members.xml')/members/member
return
	<MonthlyReport>
		<badge_number>{$m/badge_number/text()}</badge_number>
		<email>{$m/email/text()}</email>
		<first_name>{$m/first_name/text()}</first_name>
		<last_name>{$m/last_name/text()}</last_name>
		<gender>{$m/gender/text()}</gender>
		<update_date>{$current_day}</update_date>
		<first_date>{$first_day}</first_date>
		<award_threshold>{$award_threshold}</award_threshold>
		<days_above_threshold>{
count(distinct-values($source/daily_data/daily_member_data[
./member_id = $m/badge_number
and
xs:date(./date_stamp) > $first_day
and
xs:date(./date_stamp) < $current_day
and
./daily_index_value > $award_threshold
]/date_stamp))
		}</days_above_threshold>
		<index_history_items>
	{
	for $day_offset in (1 to 28)
	let $current_date := $first_day + xs:dayTimeDuration(concat("P", $day_offset, "D"))
	return
			<index_history_item>
				<day_offset>{$day_offset}</day_offset>
				<date>{$current_date}</date>
				<value>
		{						
		let $current_date_extract := xs:date($source/daily_data/daily_member_data[
				./member_id = $m/badge_number
				and
				xs:date(./date_stamp/text()) = xs:date($current_date)
			][1]/date_stamp/text())
		let $current_date_day := xs:date($current_date)
		let $current_value := $source/daily_data/daily_member_data[
				./member_id = $m/badge_number
				and
				xs:date(./date_stamp/text()) = xs:date($current_date)
			][1]/daily_index_value[1]/text()
		return 
			if ($current_date_day=$current_date_extract)
			then $current_value
			else 0
		}
				</value>
			</index_history_item>
	}
		</index_history_items>
	</MonthlyReport>
}
</MonthlyReports>

**************************************************************************************************************
let $current_day := xs:date("2015-02-15")
let $first_day := $current_day - xs:dayTimeDuration("P28D")
let $source := doc('/xPressionHelper/FromDailyUpdates/')
let $award_threshold := 300
let $award_days_above_threshold_required := 1
return
<MonthlyReports>
{
for $m in doc('/Members.xml')/members/member
let $days_above_threshold := count(distinct-values($source/daily_data/daily_member_data[./member_id = $m/badge_number and xs:date(./date_stamp) > $first_day and xs:date(./date_stamp) < $current_day and ./daily_index_value > $award_threshold]/date_stamp))
return
	<MonthlyReport>
		<badge_number>{$m/badge_number/text()}</badge_number>
		<email>{$m/email/text()}</email>
		<first_name>{$m/first_name/text()}</first_name>
		<last_name>{$m/last_name/text()}</last_name>
		<gender>{$m/gender/text()}</gender>
		<update_date>{$current_day}</update_date>
		<first_date>{$first_day}</first_date>
		<award_threshold>{$award_threshold}</award_threshold>
		<days_above_threshold>{$days_above_threshold}</days_above_threshold>
		<award>{$days_above_threshold > $ award_days_above_threshold_required}</award>
		<index_history_items>
	{
	for $day_offset in (1 to 28)
	let $current_date := $first_day + xs:dayTimeDuration(concat("P", $day_offset, "D"))
	return
			<index_history_item>
				<day_offset>{$day_offset}</day_offset>
				<date>{$current_date}</date>
				<value>
		{						
		let $current_date_extract := xs:date($source/daily_data/daily_member_data[
				./member_id = $m/badge_number
				and
				xs:date(./date_stamp/text()) = xs:date($current_date)
			][1]/date_stamp/text())
		let $current_date_day := xs:date($current_date)
		let $current_value := $source/daily_data/daily_member_data[
				./member_id = $m/badge_number
				and
				xs:date(./date_stamp/text()) = xs:date($current_date)
			][1]/daily_index_value[1]/text()
		return 
			if ($current_date_day=$current_date_extract)
			then $current_value
			else 0
		}
				</value>
			</index_history_item>
	}
		</index_history_items>
	</MonthlyReport>
}
</MonthlyReports>

fn:string-join(for $x in $doc/LineChart/Labels/Label return concat("'", string($x),"'"),",")